kubectl apply -f zap-logger-config.yaml
kubectl apply -f gorm-logger-config.yaml

kubectl apply -f all-configmap.yaml

kubectl apply -f user-deployment.yaml
kubectl apply -f user-service.yaml

kubectl apply -f department-deployment.yaml
kubectl apply -f department-service.yaml

kubectl apply -f point-deployment.yaml
kubectl apply -f point-service.yaml

kubectl apply -f postgres-pvc.yaml
kubectl apply -f postgres-secret.yaml
kubectl apply -f postgres-configmap.yaml

kubectl apply -f postgres-deployment.yaml
kubectl apply -f postgres-service.yaml



kubectl get pods
kubectl get services
minikube service user-service



curl -L https://istio.io/downloadIstio | sh -
cd istio-*
export PATH=$PWD/bin:$PATH

istioctl install --set profile=default -y
 kubectl label namespace default istio-injection=enabled



set -o allexport
source .env_local
set +o allexport

echo $DATABASE_URL

 eval $(minikube docker-env)



envsubst < helm-charts/common/values.yaml | helm upgrade common helm-charts/common -f - 
envsubst < helm-charts/postgres/values.yaml | helm upgrade postgres helm-charts/postgres -f - 

helm upgrade point-service helm-charts/point-service
helm upgrade user-service helm-charts/user-service
helm upgrade department-service helm-charts/department-service


kubectl apply -f https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.29.0/controller.yaml

wget "https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.29.0/kubeseal-0.29.0-linux-amd64.tar.gz"
tar -xvzf kubeseal-0.29.0-linux-amd64.tar.gz kubeseal
sudo install -m 755 kubeseal /usr/local/bin/kubeseal

kubectl create secret generic my-secrets --from-env-file=.env_local --dry-run=client -o json | \
kubeseal --format yaml --cert my-sealed-secrets-public-key.pem > helm-charts/common/templates/sealedsecret.yaml

kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.14.4/cert-manager.yaml

point GRPC
          livenessProbe:
            grpc:
              port: {{ .Values.containerPort }}   
            initialDelaySeconds: {{ .Values.initialDelaySeconds }}
            periodSeconds: {{ .Values.periodSeconds }}
          readinessProbe:
            grpc:
              port: {{ .Values.containerPort }}   
            initialDelaySeconds: {{ .Values.initialDelaySeconds }}
            periodSeconds: {{ .Values.periodSeconds }}


istioctl proxy-config listeners istio-ingressgateway-64d5c8dbf4-fvrpn  -n istio-system
istioctl analyze

kubectl describe gateway app-gateway -n default


AGRO CD
----------
kubectl create namespace argocd
kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

kubectl port-forward svc/argocd-server -n argocd 8080:443
kubectl port-forward svc/argocd-server -n argocd 8080:443
 https://localhost:8080  admin/ 

 khalid@khalid-Latitude-7400:~$ kubectl get pods -n argocd -l app.kubernetes.io/name=argocd-server
NAME                             READY   STATUS    RESTARTS   AGE
argocd-server-68789d47c9-pkw6q   1/1     Running   0          4m5s
khalid@khalid-Latitude-7400:~$ kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath="{.data.password}" | base64 -d && echo
7FF2ocx81xeukTtm
user-service-app.yaml



kubectl apply -f https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.29.0/controller.yaml
kubeseal --format yaml < mysecret.yaml > mysealedsecret.yaml


kubeseal --fetch-cert --controller-name=sealed-secrets-controller --controller-namespace=kube-system > my-sealed-secrets-public-key.pem
kubectl create secret generic my-secrets --from-env-file=.env_local --dry-run=client -o json | \
kubeseal --format yaml --cert my-sealed-secrets-public-key.pem > helm-charts/common/templates/sealedsecret.yaml



Monitoring
------------
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo update

kubectl create namespace monitoring
helm install monitoring prometheus-community/kube-prometheus-stack  --namespace monitoring
kubectl get pods -n monitoring
kubectl port-forward svc/monitoring-grafana 3000:80 -n monitoring

Loki
------
helm repo add grafana https://grafana.github.io/helm-charts
helm repo update
helm upgrade --install loki-stack grafana/loki-stack \
  --namespace monitoring \
  --create-namespace \
  --set grafana.enabled=true \
  --set promtail.enabled=true





grafana
---------
kubectl port-forward svc/monitoring-grafana 3000:80 -n monitoring
